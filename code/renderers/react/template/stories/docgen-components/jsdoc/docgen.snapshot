import React from 'react';
import PropTypes from 'prop-types';
const JsDocProps = () => /*#__PURE__*/React.createElement("div", null, "JSDoc with PropTypes!");
JsDocProps.propTypes = {
  /**
   * Should not be visible since it's ignored.
   *
   * @ignore
   */
  case0: PropTypes.string,
  /** Simple description. */
  case1: PropTypes.string,
  /** Multi lines description */
  case2: PropTypes.string,
  /** _description_ **with** `formatting` */
  case3: PropTypes.string,
  /**
   * Simple description and dummy JSDoc tag.
   *
   * @param event
   */
  case4: PropTypes.string,
  /** @param event */
  case5: PropTypes.string,
  /** Simple description with a @. */
  case6: PropTypes.string,
  case7: PropTypes.func,
  /** Func with a simple description. */
  case8: PropTypes.func,
  /** @param event */
  case9: PropTypes.func,
  /**
   * Param with name
   *
   * @param event
   */
  case10: PropTypes.func,
  /**
   * Param with name & type
   *
   * @param {SyntheticEvent} event
   */
  case11: PropTypes.func,
  /**
   * Param with name, type & description
   *
   * @param {SyntheticEvent} event - React's original event
   */
  case12: PropTypes.func,
  /**
   * Param with type
   *
   * @param {SyntheticEvent}
   */
  case13: PropTypes.func,
  /**
   * Param with type & description
   *
   * @param {SyntheticEvent} - React's original event
   */
  case14: PropTypes.func,
  /**
   * Param with name & description
   *
   * @param event - React's original event
   */
  case15: PropTypes.func,
  /**
   * Autofix event-
   *
   * @param event- React's original event
   */
  case16: PropTypes.func,
  /**
   * Autofix event.
   *
   * @param event.
   * @returns {string}
   */
  case17: PropTypes.func,
  /**
   * With an empty param.
   *
   * @param
   */
  case18: PropTypes.func,
  /**
   * With multiple empty params.
   *
   * @param
   * @param
   * @param
   */
  case19: PropTypes.func,
  /**
   * With arg alias.
   *
   * @param event
   */
  case20: PropTypes.func,
  /**
   * With argument alias.
   *
   * @param event
   */
  case21: PropTypes.func,
  /**
   * With multiple params.
   *
   * @param {SyntheticEvent} event
   * @param {string} stringValue
   * @param {number} numberValue
   */
  case22: PropTypes.func,
  /**
   * With an empty returns
   *
   * @returns
   */
  case23: PropTypes.func,
  /**
   * With a returns with a type
   *
   * @returns {SyntheticEvent}
   */
  case24: PropTypes.func,
  /**
   * With a returns with a type & description
   *
   * @returns {SyntheticEvent} - React's original event
   */
  case25: PropTypes.func,
  /**
   * Single param and a returns
   *
   * @param {string} stringValue
   * @returns {SyntheticEvent} - React's original event
   */
  case26: PropTypes.func,
  /**
   * Multiple params and a returns
   *
   * @param {string} stringValue
   * @param {number} numberValue
   * @returns {SyntheticEvent} - React's original event
   */
  case27: PropTypes.func,
  /**
   * Multiple returns
   *
   * @returns {SyntheticEvent} - React's original event
   * @returns {string} - Second returns
   */
  case28: PropTypes.func,
  /**
   * Param with unsupported JSDoc tags
   *
   * @version 2
   * @type {number}
   * @param {SyntheticEvent} event - React's original event
   */
  case29: PropTypes.func,
  /**
   * Param record type
   *
   * @param {{ a: number; b: string }} myType
   */
  case30: PropTypes.func,
  /**
   * Param array type
   *
   * @param {string[]} myType
   */
  case31: PropTypes.func,
  /**
   * Param union type
   *
   * @param {number | boolean} myType
   */
  case32: PropTypes.func,
  /**
   * Param any type
   *
   * @param {any} myType
   */
  case33: PropTypes.func,
  /**
   * Param repeatable type
   *
   * @param {...number} myType
   */
  case34: PropTypes.func,
  /**
   * Optional param
   *
   * @param {number} [myType]
   */
  case35: PropTypes.func,
  /**
   * Optional param
   *
   * @param {number} [myType]
   */
  case36: PropTypes.func,
  /**
   * Dot in param name
   *
   * @param {number} my.type
   */
  case37: PropTypes.func,
  /**
   * Returns record type
   *
   * @returns {{ a: number; b: string }}
   */
  case38: PropTypes.func,
  /**
   * Returns array type
   *
   * @returns {string[]}
   */
  case39: PropTypes.func,
  /**
   * Returns union type
   *
   * @returns {number | boolean}
   */
  case40: PropTypes.func,
  /**
   * Returns any type
   *
   * @returns {any}
   */
  case41: PropTypes.func,
  /**
   * Returns primitive
   *
   * @returns {string}
   */
  case42: PropTypes.func,
  /**
   * Returns void
   *
   * @returns {void}
   */
  case43: PropTypes.func
};
export const component = JsDocProps;
JsDocProps.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "JsDocProps",
  "props": {
    "case0": {
      "description": "Should not be visible since it's ignored.\n\n@ignore",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "case1": {
      "description": "Simple description.",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "case2": {
      "description": "Multi lines description",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "case3": {
      "description": "_description_ **with** `formatting`",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "case4": {
      "description": "Simple description and dummy JSDoc tag.\n\n@param event",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "case5": {
      "description": "@param event",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "case6": {
      "description": "Simple description with a @.",
      "type": {
        "name": "string"
      },
      "required": false
    },
    "case7": {
      "description": "",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case8": {
      "description": "Func with a simple description.",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case9": {
      "description": "@param event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case10": {
      "description": "Param with name\n\n@param event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case11": {
      "description": "Param with name & type\n\n@param {SyntheticEvent} event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case12": {
      "description": "Param with name, type & description\n\n@param {SyntheticEvent} event - React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case13": {
      "description": "Param with type\n\n@param {SyntheticEvent}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case14": {
      "description": "Param with type & description\n\n@param {SyntheticEvent} - React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case15": {
      "description": "Param with name & description\n\n@param event - React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case16": {
      "description": "Autofix event-\n\n@param event- React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case17": {
      "description": "Autofix event.\n\n@param event.\n@returns {string}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case18": {
      "description": "With an empty param.\n\n@param",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case19": {
      "description": "With multiple empty params.\n\n@param\n@param\n@param",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case20": {
      "description": "With arg alias.\n\n@param event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case21": {
      "description": "With argument alias.\n\n@param event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case22": {
      "description": "With multiple params.\n\n@param {SyntheticEvent} event\n@param {string} stringValue\n@param {number} numberValue",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case23": {
      "description": "With an empty returns\n\n@returns",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case24": {
      "description": "With a returns with a type\n\n@returns {SyntheticEvent}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case25": {
      "description": "With a returns with a type & description\n\n@returns {SyntheticEvent} - React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case26": {
      "description": "Single param and a returns\n\n@param {string} stringValue\n@returns {SyntheticEvent} - React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case27": {
      "description": "Multiple params and a returns\n\n@param {string} stringValue\n@param {number} numberValue\n@returns {SyntheticEvent} - React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case28": {
      "description": "Multiple returns\n\n@returns {SyntheticEvent} - React's original event\n@returns {string} - Second returns",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case29": {
      "description": "Param with unsupported JSDoc tags\n\n@version 2\n@type {number}\n@param {SyntheticEvent} event - React's original event",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case30": {
      "description": "Param record type\n\n@param {{ a: number; b: string }} myType",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case31": {
      "description": "Param array type\n\n@param {string[]} myType",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case32": {
      "description": "Param union type\n\n@param {number | boolean} myType",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case33": {
      "description": "Param any type\n\n@param {any} myType",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case34": {
      "description": "Param repeatable type\n\n@param {...number} myType",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case35": {
      "description": "Optional param\n\n@param {number} [myType]",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case36": {
      "description": "Optional param\n\n@param {number} [myType]",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case37": {
      "description": "Dot in param name\n\n@param {number} my.type",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case38": {
      "description": "Returns record type\n\n@returns {{ a: number; b: string }}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case39": {
      "description": "Returns array type\n\n@returns {string[]}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case40": {
      "description": "Returns union type\n\n@returns {number | boolean}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case41": {
      "description": "Returns any type\n\n@returns {any}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case42": {
      "description": "Returns primitive\n\n@returns {string}",
      "type": {
        "name": "func"
      },
      "required": false
    },
    "case43": {
      "description": "Returns void\n\n@returns {void}",
      "type": {
        "name": "func"
      },
      "required": false
    }
  }
};