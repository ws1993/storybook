function _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == typeof i ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != typeof t || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != typeof i) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
import React from 'react';
import PropTypes from 'prop-types';
export default class Test extends React.Component {
  render() {
    return /*#__PURE__*/React.createElement("div", null, "test");
  }
}
_defineProperty(Test, "propTypes", {
  /** Please work... */
  test: PropTypes.string
});
export const component = Test;
Test.__docgenInfo = {
  "description": "",
  "methods": [],
  "displayName": "Test",
  "props": {
    "test": {
      "description": "Please work...",
      "type": {
        "name": "string"
      },
      "required": false
    }
  }
};