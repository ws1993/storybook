diff --git a/dist/index.js b/dist/index.js
index ea14a7a52838ff2fb3010996a47f82507315019f..d5248b4daac4333ecdf250952cec3fbd39b89c19 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -6,7 +6,9 @@ import { processError } from '@vitest/utils/error';
 import { use, util } from 'chai';

 const MATCHERS_OBJECT = Symbol.for("matchers-object");
-const JEST_MATCHERS_OBJECT = Symbol.for("$$jest-matchers-object");
+// Patched this symbol for storybook, so that @storybook/test can be used in a jest environment as well.
+// Otherwise, vitest will override global jest matchers, and crash.
+const JEST_MATCHERS_OBJECT = Symbol.for("$$jest-matchers-object-storybook");
 const GLOBAL_EXPECT = Symbol.for("expect-global");
 const ASYMMETRIC_MATCHERS_OBJECT = Symbol.for(
   "asymmetric-matchers-object"
@@ -14,20 +16,24 @@ const ASYMMETRIC_MATCHERS_OBJECT = Symbol.for(

 if (!Object.prototype.hasOwnProperty.call(globalThis, MATCHERS_OBJECT)) {
   const globalState = /* @__PURE__ */ new WeakMap();
-  const matchers = /* @__PURE__ */ Object.create(null);
-  const customEqualityTesters = [];
-  const assymetricMatchers = /* @__PURE__ */ Object.create(null);
   Object.defineProperty(globalThis, MATCHERS_OBJECT, {
     get: () => globalState
   });
+}
+if (!Object.prototype.hasOwnProperty.call(globalThis, JEST_MATCHERS_OBJECT)) {
+  const matchers = /* @__PURE__ */ Object.create(null);
+  const customEqualityTesters = [];
   Object.defineProperty(globalThis, JEST_MATCHERS_OBJECT, {
     configurable: true,
     get: () => ({
-      state: globalState.get(globalThis[GLOBAL_EXPECT]),
+      state: globalThis[MATCHERS_OBJECT].get(globalThis[GLOBAL_EXPECT]),
       matchers,
       customEqualityTesters
     })
   });
+}
+if (!Object.prototype.hasOwnProperty.call(globalThis, ASYMMETRIC_MATCHERS_OBJECT)) {
+  const assymetricMatchers = /* @__PURE__ */ Object.create(null);
   Object.defineProperty(globalThis, ASYMMETRIC_MATCHERS_OBJECT, {
     get: () => assymetricMatchers
   });
